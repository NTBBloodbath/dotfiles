#!/usr/bin/env zsh

# {{{ Directories
# Utilities
function create_dir_and_cd() {
  if [[ -z "$1" ]]; then
    echo "Usage: mkc <path>"
  else
    mkdir -p "$1"
    cd "$1"
  fi
}
alias mkc="create_dir_and_cd "

function rename_dir_and_cd() {
  if [[ -z "$1" || -z "$2" ]]; then
    echo "Usage: mvc <old_path> <new_path>"
  else
    mv "$1" "$2"
    cd "$2"
  fi
}
alias mvc="rename_dir_and_cd "

# Go to previous PWD
alias pd="cd $OLDPWD"

# Updirs
alias {up,..}="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

# Development directories
__devdir="$HOME/Development"
[[ -d "$__devdir" ]] && alias dev="$__devdir"
[[ -d "$__devdir/Clang" ]] && alias cdev="$__devdir/Clang"
[[ -d "$__devdir/Elixir" ]] && alias edev="$__devdir/Elixir"
[[ -d "$__devdir/Python" ]] && alias pydev="$__devdir/Python"
[[ -d "$__devdir/Node" ]] && alias nodev="$__devdir/Node"
[[ -d "$__devdir/Haskell" ]] && alias hskdev="$__devdir/Haskell"
[[ -d "$__devdir/Misc" ]] && alias miscdev="$__devdir/Misc"
[[ -d "$__devdir/Rust" ]] && alias rustdev="$__devdir/Rust"
[[ -d "$__devdir/Nvim" ]] && alias nvimdev="$__devdir/Nvim"
[[ -d "$__devdir/Zig" ]] && alias zdev="$__devdir/Zig"
# }}}

# {{{ Listing
if [[ -x "$(command -v exa)" ]]; then
  _exa_core_args="exa --icons --group-directories-first"
  alias ls="$_exa_core_args"
  alias la="$_exa_core_args --all --ignore-glob=\".git\""
  alias ll="$_exa_core_args --long --grid --group --accessed --modified --created --header"
  alias lsa="$_exa_core_args --long --grid --group --accessed --modified --created --header --all"
  alias lt="$_exa_core_args --all --tree --level=3 --ignore-glob=\".git|.cache|node_modules\""
else
  # -v          : natural sort of (version) numbers within text
  # -p          : append '/' indicator to directories
  # -N          : print entry names without quoting
  # --file-type : append special indicators based on filetpe (exluding '*' for binaries/executables)
  _ls_core_args="ls --color=auto -vpN --file-type --group-directories-first"
  alias ls="$_ls_core_args"
  alias la="$_ls_core_args --almost-all -I \".git\""
  alias ll="$_ls_core_args -ltshc --author"
  alias lsa="$_ls_core_args -ltshc --author --almost-all -I \".git\""
  alias lt="tree -L 3 -I \".git|.cache|node_modules\""
fi
# }}}

# {{{ Archives
function extract() {
  if [[ -z "$1" ]]; then
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [[ -f "$1" ]]; then
      case "$1" in
        *.tar.bz2) tar xvjf "$1" ;;
        *.tar.gz) tar xvzf "$1" ;;
        *.tar.xz) tar xvJf "$1" ;;
        *.lzma) unlzma "$1" ;;
        *.bz2) bunzip2 "$1" ;;
        *.rar) unrar x -ad "$1" ;;
        *.gz) gunzip "$1" ;;
        *.tar) tar xvf "$1" ;;
        *.tbz) tar xvjf "$1" ;;
        *.tbz2) tar xvjf "$1" ;;
        *.tgz) tar xvzf "$1" ;;
        *.zip) unzip "$1" ;;
        *.Z) uncompress "$1" ;;
        *.7z) 7z x "$1" ;;
        *.xz) unxz "$1" ;;
        *.exe) cabextract "$1" ;;
        *) echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "$1 - file does not exist"
    fi
  fi
}
alias extr="extract "

function extract_and_remove() {
  extract "$1" && rm -f "$1"
}
alias extrr="extract_and_remove "
# }}}

# {{{ Git
function track_all_branches() {
  for branch in $(git branch --all | grep "^\s*remotes" | egrep --invert-match "(:?HEAD|master|main)$"); do
    git branch --track "${branch##*/}" "$branch"
  done
}

function clone_and_track_all_branches() {
  if [[ -z "$1" ]]; then
    echo "Usage: clone_and_track_all_branches <options> <url> <path>"
  else
    git clone "$@"
    local _repo_dir=$(basename "$1")
    _repo_dir=${_repo_dir%.*}
    pushd "$_repo_dir" > /dev/null
    echo "Tracking all remote branches in '$_repo_dir' ..."
    track_all_branches
    popd > /dev/null
  fi
}

alias gcl="git clone "
alias gcla="clone_and_track_all_branches "
alias gtb="track_all_branches"
alias gst="git status"
alias {gbra,gb}="git branch "
alias {gco,go}="git checkout "
alias {gcob,gob}="git checkout -b "
alias {gadd,ga}="git add "
alias {gdff,gd}="git diff "
alias {gcom,gc}="git commit "
alias {gpul,gl}="git pull "
alias {gpus,gp}="git push "
alias glom="git pull origin main"
alias ghom="git push origin main"
alias gg="git grep "
alias gs="git switch "
alias gr="git restore "
alias grs="git restore --staged "
alias gwa="git worktree add "
alias gwp="git worktree prune"
# }}}

# {{{ System
### Toolboxes
if [[ -x "$(command -v distrobox)" ]]; then
  alias tbw="distrobox-enter --name work"
  alias tbe="distrobox-enter --name env"
  alias tbd="distrobox-enter --name dev"
fi

### Utilities
alias df="df -h"
alias du="du -h"
alias mkdir="mkdir -p "
alias cpr="cp -r "
alias grep="grep --color=auto "
alias watch="watch -pc "

# Neovim
[[ -x "$(command -v nvim)" ]] && alias vi="nvim "

# Emacs
# This starts Emacs in terminal and starts daemon mode if not using it yet then enters emacs
[[ -x "$(command -v emacs)" ]] && alias em="emacsclient -c -t -a '' "

# Haskell Stack
if [[ -d "$HOME/.stack" ]]; then
  alias ghc="stack ghc"
  alias ghci="stack ghci"
  alias runghc="stack runghc"
fi

# Enable aliases to be sudoâ€™ed
alias sudo="sudo "

# Reload the shell (i.e. invoke as a login shell)
alias reload='exec "${SHELL}" -l'

# Print each PATH entry on a separate line
alias path='echo -e "${PATH//:/\\n}"'

# Wget
function wget_archive_and_extract() {
  if [[ -z "$1" ]]; then
    echo "Usage: wget_archive_and_extract <url>"
  else
    local -r URL="$1"
    local -r FILENAME="${URL##*/}"
    wget "$URL" -O "$FILENAME"
    extract "$FILENAME"
    rm "$FILENAME"
  fi
}
alias wgetae="wget_archive_and_extract "

alias ssh="TERM=xterm-256color ssh"

### Make and compilers
CORES="$(nproc)"
# Use only the half of cores, e.g. 4 cores => 2 jobs
# this is for limiting the melting of my processor, specially with rustc.
JOBS="$(expr $CORES / 2)"
alias make="make -j$JOBS"
# alias cargob="cargo build -j $JOBS"

# Run zig from its installation path (extracted from tarball)
if [[ -d "$HOME/.local/zig/current" ]]; then
  alias zb="zig build --prominent-compile-errors "
  alias zr="zig run "
  alias zt="zig test "
  alias zfmt="zig fmt "
fi

# }}}

# {{{ Kitty
if [[ -x "$(command -v kitty)" ]]; then
  alias dcat="kitty +kitten diff"
  alias icat="kitty +kitten icat"
  if [[ "$TERM" == "xterm-kitty" ]]; then
    alias ssh="kitty +kitten ssh"
  fi
fi
# }}}

# {{{ theme.sh
if [[ -x "$(command -v theme.sh)" ]]; then
  alias th="theme.sh -i"
  alias thl="theme.sh --light -i"
  alias thd="theme.sh --dark -i"
fi
# }}}

# vim: fdm=marker ft=bash sw=2 ts=2
